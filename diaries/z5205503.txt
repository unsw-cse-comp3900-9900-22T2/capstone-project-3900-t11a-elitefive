Week 1

David C and I discussed project ideas before class, and he introduced the 'Yavalath' game idea to me.
We formed the group of 5 in class and presented the idea to the group.
During class, we brainstormed some features, functionality and objectives for our project for the Custom Project Proposal.
We distributed front-end, back-end and database responsibilities to each member in class.
David and I reviewed and revised the Custom Project Proposal remotely.
After several e-mail exchanges between David and the lecturer, our custom project idea was approved accepted.

For next week:
- Group meeting to solidify project functionality and features
- UI & Database meeting
- Programming stack (prototype)

Week 2

On Tuesday (after class), we had a group meeting to solidfy project functionality, features and goals.
During this meeting, we had an extensive discussion to develop a simple 'project description'. Sage and I had some initial discussions related to database design for the project.
On Thursday, I participated in the latter section of the UI meeting with David, Jacky X and Yirong and provided some light feedback.
On Saturday, David, Sage and I had our database meeting. We discussed and began developing the database schema and created simple draft diagrams (ER & Relational).
In particular, we went into great detail regarding the storage of a user's ELO and how we were going to represent this in the database.
We have a good foundation for several tables such as Users, Friends, Matches, Games, Replays, Outcomes and ReplayComments.
However, we still have yet to decide on specific details for some tables. For example, how to store move sequences (or board states) under Replays.

For next week:
- Set up and begin coding
- Begin and progress on report writing
- Elaborate on database design and queries

Week 3

During class on Tuesday, David C and Jacky X began developing UI design while Sage and I began developing User Stories for the proposal report.
We established the project functionalities as Epic Stories and developed appropriate user stories for each. I also began writing up acceptance criteria for many user stories.
Jacky X, Yirong and David worked on UI diagrams, Sage developed database ER diagrams, and Sage and I started on User Stories which were then added onto by everyone.
During report writing, I assisted David C with working on the Background section of the report and reviewing/finalizing the User Stories.
We established the appropriate user stories for our first sprint - we wanted to make sure we could get the basic game and features established for demonstration by the end of the first sprint.
After all diagrams were completed, they were all added into the report. David and I went through the report thoroughly and finalized it.
Jacky X and David C set up their coding environments. Unfortunately, I was unable to set up my coding environment or start coding as I was already very occupied with the Proposal Report and User Stories.

For next week:
- Set up coding environment and focus heavily on coding to ensure we have completed all tasks for the first sprint.
- Establish database and corresponding SQL queries.

Week 4

We had a meeting in class on Tuesday to discuss what needed to be set up and completed by next class, which was the first sprint.
Everyone had Docker and their coding environments set up completely within a day or two of the class so we could begin programming.
- Jacky X and Yirong focused on frontend work.
- Sage and I focused on the database.
- David and I worked on the backend.
I started by working on the database side and refactored some code that Sage had written up; however, I ran into some issues with libraries.
I then worked on some backend - more specifically, the game logic, with system and functionality that David had put in place.
Furthermore, I modified some frontend and backend code to fix some issues with some user interaction issues regarding the playable board.

For next week:
- Sprint 1 Demo
- Continue coding and making progress towards Sprint 2

Week 5

Before our Sprint 1 demonstration on Tuesday, I implemented a fix which required a played move to be checked in the backend before displaying on the frontend. This meant that tiles
by the opponent could not be overwritten.

On Tuesday, our group demonstrated the available functionalities of our first sprint, which went quite well. Right after our demo, we had a meeting for our Retrospective A
report where we discussed the positives and drawbacks during the sprint.

For next week:
- Complete Retrospective A report
- Make progress towards Sprint 2

Week 6 & 7

I modified the schema file (schema.sql) - specifically added extra field for ranked in Matches and changed start_time to end_time.
Also changed Friends table to a Friendship table, which acts as a log of all friendship interactions (sending a request, accepting/denying a request, deleting a friend, etc.).
However, after some discussion, we decided to revert thatchange -  the Friendship table should be separated into two separate tables instead - a friends table and a friend
requests table. Furthermore, inserted demo test data into the schema.sql file such that data will already exist in the database by the next demonstration.

With regards to the database management system for backend itself, I heavily refactored the main database code into a class and also used Prepared Statements (from db_functions to
db_manager). This is instantiated at the beginning and then passed around to different parts of the program to be used.

As a core and main focus of Sprint 2 is to demonstrate multiplayer functionality, I implemented all the related database functionality that would be required to do this in the newly
refactored database manager system with prepared statements. This includes getting matches, inserting matches, getting a particular user's matches, getting matches by snapshot (which was
another important feature we wanted to demonstrate with this sprint), etc. Furthermore, I created new database classes in order to represent the data returned from the database,
including Match, Player and PlayerStats for backend to use in db_classes.hpp. I created helper database functions, including a function that would parse matches fetched
from the database into Match, Player and PlayerStats objects.

Importantly, I created the save_match function, which would batch inserts all the data from a match into the corresponding tables in the database (Matches, Snapshots, Outcomes). This uses the batch_insert function I
implemented, which uses pqxx's stream. This is particularly useful as it avoids the execution of too many SQL queries at once.

Another key functionality for Sprint 2 was the Friends System, and as such, I also implemented corresponding database functionality to support this - including adding friends, sending
friend requests, accepting/denying friend requests and deleting friends.

I also implemented the endpoint functions that would convert the match and friends data to JSON to send to frontend.

For next week:
- Sprint 2 Demo.
- Make progress towards final sprint.

Week 8

On Tuesday, we did the Sprint 2 demonstration and soon after, we had a meeting for Retrospective B and throughout the week, we completed the Retrospective B report.

Aside from this, I worked towards completing the remaining functionality for our final sprint and made some general changes and fixes to our project:
- Modified match queries and class to include a list of potholes.
- A user can no longer add themselves as a friend.
- Fix database return for stats (ranked games), which would incorrectly return stats for both ranked and unranked games.
- Implemented database queries for leaderboards.
- Implemented endpoints and API handlers for leaderboards.
- Database fetch for ELO history and endpoints/API handlers complete.
- Several minor changes to the save_match function to account for the changes to the Matches table in the database.

For next week:
- Continue making progress towards the final sprint.

Week 9

Continues to make progress towards final sprint. This includes:
- Added extra column for svg_data in the Matches table in the database. This column is used for generating the thumbnail of matches for replays.
  save_match() function has also been modified to generate svg_data and insert this into the database.


