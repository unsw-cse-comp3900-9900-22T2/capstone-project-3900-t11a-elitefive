Week 1

This week we formed our group of 5. David and Jacky J came with an idea for a custom project to work on so we went with that. It was for a web interface for an existing boardgame but with additions to the game and added features to make the website a more fun/competitve enironment to play with friends. 

We spend the tutorial organising roles for each member, working out availablility for meetings and brainstorming features.

Week 2

This week we had a group meeting on Tuesday to work on the final functionality of the project website and deliverables. We also went over the purpose of the project to come up with ideas for a pitch. While hashign out the functionality of the game we came up with a number of features inluding different ELOS based on different game types, representation of an ELO graph that showed change over time, replays and more. Jacky J & I started brainstorming how to represent these in a database, especially the sequence things.

On Saturday I had a database meeting with Jacky K and David where we went over the best fitting ways to represent aspects of the game, and generated some ER and relational diagrams for the database.

Week 3

Next week the proposal is due which is worth 10% so we spent a good chunk of time working on that. Me & Jackie J worked on the initial epic stories and user stories in the tutorial. 

Later in the week I made ER and relational database diagrams for the systems architecture part of the report, and wrote a description. I also made a schema for the database

Over the weekeend we had a number of meetings to complete and edit the report, and hand it in on Sunday night.


Week 4

The first sprint is due next week so we all spent a lot of time coding and collaboratig in our discord. 

I wrote come c++ files containing functions to connect to a postrgres instance, insert & retrieve data using the schema from the previous week, and perform a password hash.

Jackie X had made a docker container system for the frontent & backing & I added a postrgres databse to the system & added it into the dockerfile. I loaded the schema from earlier and moved my code into the backend. I found that the hashing library I used for the password wasn't effective, so that needs to be changed. 

finally, I wrote some code to accept post requests in json format from the frontend, parse them and pipe them to the database, which is the link betwee nthe 3 docker containers.

